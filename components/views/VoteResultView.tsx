import { ComponentChildren } from "preact";

import { Choice, Group, Poll } from "üõ†Ô∏è/types.ts";

import BlankSlate from "üß±/BlankSlate.tsx";
import Link from "üß±/Link.tsx";
import Quotes from "üß±/Quotes.tsx";
import View from "üß±/View.tsx";

interface Props {
  poll: Poll;
  choice: Choice;
  backLink: Readonly<[string, string]>;
  voteResult: "success" | "duplicate" | "inactive" | "nonSameGroupPoll";
  group?: Group;
  prevVotedGroupPoll?: Poll;
}

export default function VoteResultView(props: Props) {
  const {
    choice,
    poll,
    group,
    voteResult,
    prevVotedGroupPoll,
    backLink,
  } = props;

  let blankSlate;

  const changeVoteLine = (
    <div class="mt-2">
      –ù–∞–ø—Ä–∞–≤–∏–ª–∏ —Å—Ç–µ –≥—Ä–µ—à–∫–∞?{"  "}
      <Link href={`/${poll.slug}/vote`} class="whitespace-nowrap">
        –ü—Ä–æ–º–µ–Ω–µ—Ç–µ –≥–ª–∞—Å–∞ —Å–∏
      </Link>.
    </div>
  );

  if (voteResult === "success") {
    blankSlate = <Success choice={choice} changeVoteLine={changeVoteLine} />;
  } else if (voteResult === "duplicate") {
    blankSlate = (
      <DuplicateChoice choice={choice} changeVoteLine={changeVoteLine} />
    );
  } else if (voteResult === "inactive") {
    blankSlate = <PollInactive />;
  } else if (voteResult === "nonSameGroupPoll" && group && prevVotedGroupPoll) {
    blankSlate = (
      <NotSameGroupPoll
        group={group}
        thisPoll={poll}
        prevPoll={prevVotedGroupPoll}
      />
    );
  }
  return (
    <View
      blankSlate={blankSlate}
      backLink={backLink}
    />
  );
}

function Success(
  { choice, changeVoteLine }: {
    choice: Choice;
    changeVoteLine: ComponentChildren;
  },
) {
  return (
    <BlankSlate
      icon="‚úÖ"
      headline="–£—Å–ø–µ—à–Ω–æ –≥–ª–∞—Å—É–≤–∞–Ω–µ"
      subline={
        <>
          –í–∏–µ –≥–ª–∞—Å—É–≤–∞—Ö—Ç–µ –∑–∞ <Quotes>{choice.title}</Quotes>. {changeVoteLine}
        </>
      }
    />
  );
}

function DuplicateChoice(
  { choice, changeVoteLine }: {
    choice: Choice;
    changeVoteLine: ComponentChildren;
  },
) {
  return (
    <BlankSlate
      icon="‚ùå"
      headline="–ù–µ—É—Å–ø–µ—à–Ω–æ –≥–ª–∞—Å—É–≤–∞–Ω–µ"
      subline={
        <>
          –í–µ—á–µ —Å—Ç–µ –≥–ª–∞—Å—É–≤–∞–ª–∏ –∑–∞ <Quotes>{choice.title}</Quotes>.{" "}
          {changeVoteLine}
        </>
      }
    />
  );
}

function NotSameGroupPoll({ group, thisPoll, prevPoll }: {
  group: Group;
  thisPoll: Poll;
  prevPoll: Poll;
}) {
  return (
    <BlankSlate
      icon="‚ùå"
      headline="–ù–µ—É—Å–ø–µ—à–Ω–æ –≥–ª–∞—Å—É–≤–∞–Ω–µ"
      subline={
        <>
          –ù–µ –º–æ–∂–µ—Ç–µ –¥–∞ –≥–ª–∞—Å—É–≤–∞—Ç–µ –Ω–∞ <Quotes>{group.title}</Quotes> –≤{" "}
          <Quotes>{thisPoll.title}</Quotes>, –∑–∞—â–æ—Ç–æ –≤–µ—á–µ —Å—Ç–µ –≥–ª–∞—Å—É–≤–∞–ª–∏ –≤{" "}
          <Quotes>{prevPoll.title}</Quotes>.
        </>
      }
    />
  );
}

function PollInactive() {
  return (
    <BlankSlate
      icon="‚ùå"
      headline="–ù–µ—É—Å–ø–µ—à–Ω–æ –≥–ª–∞—Å—É–≤–∞–Ω–µ"
      subline="–ì–ª–∞—Å—É–≤–∞–Ω–µ—Ç–æ –µ —Å–ø—Ä—è–Ω–æ"
    />
  );
}
